# name: WebOS build
on:
  push:
  pull_request:
  workflow_dispatch:

env:
  APT_DEPS: ccache git cmake build-essential qtbase5-dev libqt5serialport5-dev libqt5sql5-sqlite libqt5svg5-dev libqt5x11extras5-dev python3-dev libxcb-image0-dev libxcb-util0-dev libxcb-shm0-dev libxcb-render0-dev libxcb-randr0-dev libxrandr-dev libxrender-dev libturbojpeg0-dev libssl-dev libmbedtls-dev
  TOOLCHAIN_URL: https://api.cirrus-ci.com/v1/artifact/task/6395549015343104/sdk/output/images/arm-webos-linux-gnueabi_sdk-buildroot.tar.gz
  TOOLCHAIN_DIR: /opt/arm-webos-linux-gnueabi_sdk-buildroot
  TOOLCHAIN_FILE: /opt/arm-webos-linux-gnueabi_sdk-buildroot/share/buildroot/toolchainfile.cmake
  BUILD_DIR_NATIVE: build-x86x64
  BUILD_DIR_CROSS: build-cross
  DEPENDENCY_LIBS: libpng16.so.16 libcrypto.so.1.1 libz.so.1 libssl.so.1.1 libQt5Sql.so.5.15.2 libpcre2-16.so.0 libQt5Gui.so.5 libQt5Network.so.5 libQt5Widgets.so.5 libk5crypto.so.3 libatomic.so.1 libQt5Core.so.5 libkrb5support.so.0 libcom_err.so.3 libstdc++.so.6 libkrb5.so.3 libQt5Sql.so.5 libgssapi_krb5.so.2 libQt5SerialPort.so.5 libQt5Sql.so.5.15
  RELEASE_DIR: release

jobs:
  build_webos:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true

      - name: Cache build dirs
        id: cache-build
        uses: actions/cache@v2
        with:
          path: |
            ./build-x86x64
            ./build-cross
          key: ${{ runner.os }}-webos-build-cache
      - name: Create build directories
        run: |
          mkdir -p ${BUILD_DIR_NATIVE}
          mkdir -p ${BUILD_DIR_CROSS}

      - name: Download and unpack toolchain
        working-directory: /opt
        run: |
          wget -q -O toolchain.tar.gz ${TOOLCHAIN_URL}
          tar xf toolchain.tar.gz

      - name: Relocate toolchain
        run: |
          pushd ${TOOLCHAIN_DIR}
          ./relocate-sdk.sh
          popd

      - name: Install native dependencies
        run: sudo apt install -y ${APT_DEPS}

      - name: Build native
        run: |
          pushd ./${BUILD_DIR_NATIVE}
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DENABLE_FLATBUF_SERVER=OFF \
            -DENABLE_DISPMANX=OFF \
            -DENABLE_FB=OFF \
            -DENABLE_V4L2=OFF \
            -DENABLE_X11=OFF \
            -DENABLE_XCB=OFF \
            -DENABLE_BOBLIGHT_SERVER=OFF \
            -DENABLE_CEC=OFF \
            -DENABLE_DEV_NETWORK=OFF \
            -DENABLE_DEV_SERIAL=OFF \
            -DENABLE_DEV_TINKERFORGE=OFF \
            -DENABLE_DEV_USB_HID=OFF \
            -DENABLE_AVAHI=OFF \
            -DENABLE_EFFECTENGINE=OFF \
            -DENABLE_REMOTE_CTL=OFF \
            -Wno-dev
          make
          popd

      - name: Build cross (webos arm)
        run: |
          pushd ${BUILD_DIR_CROSS}
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} \
            -DCMAKE_BUILD_TYPE=Release \
            -DPLATFORM=rpi \
            -DHYPERION_LIGHT=ON \
            -DENABLE_QT=OFF \
            -DENABLE_EFFECTENGINE=OFF \
            -DENABLE_JSONCHECKS=OFF \
            -DENABLE_DEV_SERIAL=ON \
            -DENABLE_DEV_USB_HID=OFF \
            -DENABLE_DEV_WS281XPWM=OFF \
            -DENABLE_DEV_TINKERFORGE=OFF \
            -DENABLE_AVAHI=OFF \
            -DENABLE_DEPLOY_DEPENDENCIES=OFF \
            -DENABLE_FLATBUF_SERVER=ON \
            -DIMPORT_FLATC=${GITHUB_WORKSPACE}/${BUILD_DIR_NATIVE}/flatc_export.cmake
          make
          popd

      - name: Create release directory
        run: |
          mkdir ./${RELEASE_DIR}
          cp -r ./${BUILD_DIR_CROSS}/bin/* ./${RELEASE_DIR}/
          find ./${RELEASE_DIR}

      - name: Copy dependencies into release directory
        run: |
          for i in ${DEPENDENCY_LIBS}; do find ${TOOLCHAIN_DIR}/arm-webos-linux-gnueabi/sysroot/ -name $i -exec cp {} ./${RELEASE_DIR}/ \;; done
          mkdir -p ./${RELEASE_DIR}/sqldrivers
          cp ${TOOLCHAIN_DIR}/arm-webos-linux-gnueabi/sysroot/usr/lib/qt/plugins/sqldrivers/libqsqlite.so ./${RELEASE_DIR}/sqldrivers/
          find ./${RELEASE_DIR}

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ./release/* is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
